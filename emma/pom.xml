<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one or more
  ~ contributor license agreements.  See the NOTICE file distributed with
  ~ this work for additional information regarding copyright ownership.
  ~ The ASF licenses this file to You under the Apache License, Version 2.0
  ~ (the "License"); you may not use this file except in compliance with
  ~ the License.  You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <artifactId>zeppelin</artifactId>
    <groupId>org.apache.zeppelin</groupId>
    <version>0.6.0-incubating-SNAPSHOT</version>
  </parent>

  <artifactId>zeppelin-emma</artifactId>
  <packaging>jar</packaging>
  <version>0.6.0-incubating-SNAPSHOT</version>
  <name>Zeppelin: Emma interpreter</name>
  <url>http://zeppelin.incubator.apache.org</url>

  <properties>
    <interpreter.name>emma</interpreter.name>
    <emma.execution.backend>native</emma.execution.backend>
    <emma.execution.mode>local</emma.execution.mode>
    <!-- Paths -->
    <interpreter.path>
      ${project.build.directory}/../../interpreter/${interpreter.name}
    </interpreter.path>
    <emma.flink.path>${interpreter.path}/emma-flink</emma.flink.path>
    <emma.spark.path>${interpreter.path}/emma-spark</emma.spark.path>
    <!-- Emma -->
    <emma.version>1.0-SNAPSHOT</emma.version>
    <!-- Flink -->
    <flink.version>0.9-SNAPSHOT</flink.version>
    <!-- Spark -->
    <spark.version>1.2.1</spark.version>
    <!-- Hadoop -->
    <hadoop.version>2.2.0</hadoop.version>
    <!-- Scala -->
    <scala.version>2.11.7</scala.version>
    <scala.tools.version>2.11</scala.tools.version>
    <scalatest.version>2.1.5</scalatest.version>
    <scalacheck.version>1.12.4</scalacheck.version>
    <!-- Guava -->
    <guava.version>18.0</guava.version>
    <!-- JUnit -->
    <junit.version>4.12</junit.version>
    <!-- Maven plugins -->
    <scala-maven-plugin.version>3.2.0</scala-maven-plugin.version>
    <maven-enforcer-plugin.version>1.3.1</maven-enforcer-plugin.version>
    <maven-deploy-plugin.version>2.7</maven-deploy-plugin.version>
    <maven-dependency-plugin.version>2.10</maven-dependency-plugin.version>
    <properties-maven-plugin.version>1.0-alpha-2</properties-maven-plugin.version>
  </properties>

  <dependencies>
    <!-- Zeppelin -->
    <dependency>
      <groupId>org.apache.zeppelin</groupId>
      <artifactId>zeppelin-interpreter</artifactId>
      <version>${project.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- Emma -->
    <dependency>
      <groupId>eu.stratosphere</groupId>
      <artifactId>emma-language</artifactId>
      <version>${emma.version}</version>
      <scope>runtime</scope>
    </dependency>

    <!-- HDFS -->
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-common</artifactId>
      <version>${hadoop.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-hdfs</artifactId>
      <version>${hadoop.version}</version>
      <scope>runtime</scope>
    </dependency>

    <!-- Scala -->
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <version>${scala.version}</version>
    </dependency>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-reflect</artifactId>
      <version>${scala.version}</version>
    </dependency>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-compiler</artifactId>
      <version>${scala.version}</version>
    </dependency>

    <!-- Test -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.scalacheck</groupId>
      <artifactId>scalacheck_${scala.tools.version}</artifactId>
      <version>${scalacheck.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest_${scala.tools.version}</artifactId>
      <version>${scalatest.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <dependencyManagement>
    <dependencies>
      <!-- Emma -->
      <dependency>
        <groupId>eu.stratosphere</groupId>
        <artifactId>emma-spark</artifactId>
        <version>${emma.version}</version>
        <scope>runtime</scope>
      </dependency>
      <dependency>
        <groupId>eu.stratosphere</groupId>
        <artifactId>emma-flink</artifactId>
        <version>${emma.version}</version>
        <scope>runtime</scope>
      </dependency>

      <!-- Flink -->
      <dependency>
        <groupId>eu.stratosphere</groupId>
        <artifactId>flink-scala</artifactId>
        <version>${flink.version}</version>
        <scope>runtime</scope>
      </dependency>
      <dependency>
        <groupId>eu.stratosphere</groupId>
        <artifactId>flink-java</artifactId>
        <version>${flink.version}</version>
        <scope>runtime</scope>
      </dependency>
      <dependency>
        <groupId>eu.stratosphere</groupId>
        <artifactId>flink-clients</artifactId>
        <version>${flink.version}</version>
        <scope>runtime</scope>
      </dependency>

      <!-- Spark -->
      <dependency>
        <groupId>org.apache.spark</groupId>
        <artifactId>spark-core_${scala.tools.version}</artifactId>
        <version>${spark.version}</version>
        <scope>runtime</scope>
      </dependency>
      <!-- Guava -->
      <dependency>
        <groupId>com.google.guava</groupId>
        <artifactId>guava</artifactId>
        <version>${guava.version}</version>
        <scope>runtime</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <plugins>
      <!-- Copy properties to configuration file -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <version>${properties-maven-plugin.version}</version>
        <executions>
          <execution>
            <phase>generate-resources</phase>
            <goals>
              <goal>write-project-properties</goal>
            </goals>
            <configuration>
              <outputFile>${project.basedir}/src/main/resources/pom.properties</outputFile>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Test configuration -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <includes>
            <include>**/*Spec.*</include>
            <include>**/*Test.*</include>
          </includes>
        </configuration>
      </plugin>

      <!-- Scala compiler -->
      <plugin>
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <version>${scala-maven-plugin.version}</version>
        <executions>
          <!-- Run scala compiler in the process-resources phase, so that dependencies on -->
          <!-- scala classes can be resolved later in the Java compile phase -->
          <execution>
            <id>scala-compile-first</id>
            <phase>process-resources</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>

          <!-- Run scala compiler in the process-test-resources phase, so that dependencies on -->
          <!-- scala classes can be resolved later in the Java test-compile phase -->
          <execution>
            <id>scala-test-compile</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
          <recompileMode>incremental</recompileMode>
          <useZincServer>true</useZincServer>
          <jvmArgs>
            <jvmArg>-Xms128m</jvmArg>
            <jvmArg>-Xmx512m</jvmArg>
            <javacArg>-Xlint:unchecked</javacArg>
            <javacArg>-Xlint:deprecation</javacArg>
          </jvmArgs>
          <args>
            <arg>-unchecked</arg>
            <arg>-deprecation</arg>
            <arg>-feature</arg>
          </args>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>${maven-deploy-plugin.version}</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>1.3.1</version>
        <executions>
          <execution>
            <id>enforce</id>
            <phase>none</phase>
          </execution>
        </executions>
      </plugin>

      <!-- Copy artifacts to interpreter home -->
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>${maven-dependency-plugin.version}</version>
        <executions>
          <execution>
            <id>copy-dependencies</id>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${interpreter.path}</outputDirectory>
              <overWriteReleases>false</overWriteReleases>
              <overWriteSnapshots>false</overWriteSnapshots>
              <overWriteIfNewer>true</overWriteIfNewer>
              <includeScope>runtime</includeScope>
            </configuration>
          </execution>
          <execution>
            <id>copy-artifacts</id>
            <phase>package</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <overWriteReleases>false</overWriteReleases>
              <overWriteSnapshots>false</overWriteSnapshots>
              <overWriteIfNewer>true</overWriteIfNewer>
              <includeScope>runtime</includeScope>
              <artifactItems>
                <artifactItem>
                  <groupId>${project.groupId}</groupId>
                  <artifactId>${project.artifactId}</artifactId>
                  <version>${project.version}</version>
                  <type>${project.packaging}</type>
                  <outputDirectory>${interpreter.path}</outputDirectory>

                </artifactItem>

                <!-- Emma on Flink -->
                <artifactItem>
                  <groupId>eu.stratosphere</groupId>
                  <artifactId>emma-flink</artifactId>
                  <type>jar</type>
                  <outputDirectory>${emma.flink.path}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>eu.stratosphere</groupId>
                  <artifactId>flink-clients</artifactId>
                  <type>jar</type>
                  <outputDirectory>${emma.flink.path}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>eu.stratosphere</groupId>
                  <artifactId>flink-java</artifactId>
                  <type>jar</type>
                  <outputDirectory>${emma.flink.path}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>eu.stratosphere</groupId>
                  <artifactId>flink-scala</artifactId>
                  <type>jar</type>
                  <outputDirectory>${emma.flink.path}</outputDirectory>
                </artifactItem>

                <!-- Emma on Spark -->
                <artifactItem>
                  <groupId>eu.stratosphere</groupId>
                  <artifactId>emma-spark</artifactId>
                  <type>jar</type>
                  <outputDirectory>${emma.spark.path}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>org.apache.spark</groupId>
                  <artifactId>spark-core_${scala.tools.version}</artifactId>
                  <type>jar</type>
                  <outputDirectory>${emma.spark.path}</outputDirectory>
                </artifactItem>
                <artifactItem>
                  <groupId>com.google.guava</groupId>
                  <artifactId>guava</artifactId>
                  <type>jar</type>
                  <outputDirectory>${emma.spark.path}</outputDirectory>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
